require_relative 'utils'

# This class represents an entry in the look-up table used to reverse translate
# a given log message. Here, we take as input a parsed-out POT file entry 
# (generated by POParser) and create a map of ParameterizedString => ParameterizedString
# entries (Foreign Message => Translation).
class POEntry
  attr_reader :min_length

  def initialize(pot_entry)
    msgid_part, msgstr_part = pot_entry
    translation = msgid_part["msgid#{"_plural" if msgid_part.size > 1}"]
    @translations = msgstr_part.values.map { |value| [value, translation] }.to_h
    @min_length = @translations.keys.map { |k| k.length }.min
  end

  # This method does the reverse translation. Here we find the first matching
  # msgstr in our translation map. If no match exists, the method returns nil.
  # Otherwise, the following is returned:
  #    [translated_msg, max_untranslated_length]
  # where translated_msg is the translated message, and max_untranslated_length is
  # the remaining part of the message for translation. Note that max_untranslated_length
  # is the maximum between:
  #   (1) Pre length
  #   (2) Post length
  #   (3) Param length
  # where "Pre", and "Post" are the parts before and after the translated portion
  # of the message, and (3) are the lengths of the message's parameters (because
  # foreign log messages can contain other foreign log messages as parameters).
  def reverse_translate(msg)
    matching_str = @translations.keys.find { |k| k.match(msg) }
    return nil unless matching_str
    pre, param_values, post = matching_str.match(msg)
   
    max_untranslated_length = Math.max(pre.length, post.length)
    max_untranslated_length = param_values.values.inject(max_untranslated_length) do |accum, value|
      Math.max(accum, value.length)
    end

    translated_msg = pre + @translations[matching_str].substitute_values(param_values) + post

    [translated_msg, max_untranslated_length]
  end
end
