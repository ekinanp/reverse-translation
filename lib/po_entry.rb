require_relative 'po_param'

# This class represents an entry in the look-up table used to reverse translate
# a given log message. Here, we take as input a parsed-out POT file entry 
# (generated by POParser) and from there, we convert message strings of the form
# p1 m1 p2 m2 ... where p1 = parameter 1, m1 = message 1 to regexes of the form
# (.*) m1 (.*) m2 ... and map these regexes to the corresponding msgid (or msgid_plural).
class POEntry
  def initialize(param_re, pot_entry)
    @param_re = param_re
    msgid_part, msgstr_part = pot_entry
    translation = msgid_part["msgid#{"_plural" if msgid_part.size > 1}"]
    @translations = msgstr_part.values.map do |value| 
      key_regex = to_regex(value)
      params = POParam.extract_params(value, @param_re)
      [key_regex, [translation, params]]
    end.to_h
  end
  
  def to_regex(msgstr) 
    Regexp.new(Regexp.escape(msgstr).gsub(POParam::to_param_sub_re(@param_re),'\1(?m-ix:(.*))'))
  end

  # This method parses out a message matching a given regex pattern by returning
  # the following: [pre, param_values, post]. Pre and post are parts of the message before
  # and after the match, respectively, while param_values is a map of parameters to their
  # values, if any, in the message. 
  def parse_match(msg, match_re)
    match_obj = match_re.match(msg)
    _, params = @translations[match_re]
    param_values = params.zip(match_obj[1..-1]).to_h
    [match_obj.pre_match, param_values, match_obj.post_match]
  end

  # This method does the reverse translation. Here we find the first matching
  # msgstr in our translation map, extract out the parameters, translate it to
  # its original form, and then put the parameters back in. Note that only part
  # of the message might be translated.
  def reverse_translate(msg)
    match_re = @translations.keys.find { |k| msg =~ k }
    return msg if match_re == nil 
    pre, param_values, post = parse_match(msg, @param_re)
    translation, _ = @translations[match_re] 
    pre + POParam::substitute_params(translation, @param_re, param_values) + post
  end

  private #:to_regex#, :extract_params
end
